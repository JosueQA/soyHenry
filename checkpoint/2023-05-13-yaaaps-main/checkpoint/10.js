const { BinarySearchTree } = require("../DS");
/* ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è

üîü ***** EJERCICIO 10 ***** - agregarEmpleado() üîü

Dentro de nuestro hospital tenemos un √°rbol binario que nos permite tener registrado a todos nuestros empleados.
Este mes necesitamos ordenar este √°rbol a partir de los a√±os de antiguedad del empleado. Para esto crea un
nuevo m√©todo que agregue a los empleados de un arreglo a partir de este dato.
  - Los empleados con menor cantidad de a√±os de antiguedad van a la izquierda.
  - Los empleados con m√°s cantidad a√±os de antiguedad van a la derecha.

üìù EJEMPLO üìù
[{ nombre: mar√≠a, a√±os: 7 }, { nombre: Pedro, a√±os: 5 }, { nombre: mar√≠a, a√±os: 9 }]

(INPUT) ‚û° { nombre: Juan, a√±os: 8 }

(OUTPUT) ‚û° 
                Mar√≠a
                /     \
              Pedro    Luis
                      /
                    Juan
// ACLARACION si los a√±os de antiguedad son menor debe ir a la izquierda y si es mayor o igual a la derecha.
REQUISITOS
üü¢ En caso de querer insertar un empleado que ya se encuentra en el √°rbol, debe retornar el
string: "No se puede agregar el mismo empleado".
üü¢ En caso de insertar el empleado correctamente si los a√±os de antiguedad son menor debe ir a la izquierda y si es mayor o igual a la derecha.
üü¢ Debe retornar el nuevo nodo que ha sido insertado.
*/

BinarySearchTree.prototype.agregarEmpleado = function (empleado, array = []) {
  // Tu c√≥digo aqu√≠:
  if (array.length == 0) {
    array.push(this.value.nombre);
    if (this.left) this.left.agregarEmpleado(empleado, array);
    if (this.right) this.right.agregarEmpleado(empleado, array);
    if (array.includes(empleado.nombre))
      return "No se puede agregar el mismo empleado";
  }

  if (this.value.a√±os > empleado.a√±os) {
    if (this.left == null) {
      this.left = new BinarySearchTree(empleado);
      return this.left;
    } else {
      this.left.agregarEmpleado(empleado, array);
    }
  } else {
    if (!this.right) {
      this.right = new BinarySearchTree(empleado);
      return this.right;
    } else {
      this.right.agregarEmpleado(empleado, array);
    }
  }
};

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
  BinarySearchTree,
};
